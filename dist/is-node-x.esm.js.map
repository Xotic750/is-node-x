{"version":3,"sources":["../src/is-node-x.js"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAsB,cAAtB;AACA,OAAO,OAAP,MAAoB,WAApB;AAEA,IAAM,GAAG,GAAG,OAAO,QAAP,KAAoB,WAApB,GAAkC,IAAlC,GAAyC,QAArD;AACA,IAAM,gBAAgB,GAAG,GAAG,GAAG,GAAG,CAAC,aAAP,GAAuB,IAAnD;AACA,IAAM,OAAO,GAAG,GAAG,GAAG,GAAG,CAAC,aAAJ,CAAkB,KAAlB,CAAH,GAA8B,IAAjD;;AAEA,IAAM,kBAAkB,GAAG,SAAS,kBAAT,GAA8B;AACvD,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,SAAT,GAAqB;AAC1C,WAAO,gBAAgB,CAAC,IAAjB,CAAsB,OAAtB,CAAP;AACD,GAFqB,CAAtB;AAIA,SAAO,MAAM,CAAC,KAAP,KAAiB,KAAjB,IAA0B,OAAO,MAAM,CAAC,KAAd,KAAwB,SAAzD;AACD,CAND;;AAQA,IAAM,eAAe,GAAG,kBAAkB,EAA1C;AACA,IAAM,eAAe,GAAG,OAAO,IAAI,eAAe,KAAK,KAA/B,GAAuC,OAAO,CAAC,aAA/C,GAA+D,gBAAvF;;AAEA,IAAM,UAAU,GAAG,SAAS,UAAT,CAAoB,KAApB,EAA2B;AAC5C,SAAO,SAAS,CAAC,eAAD,CAAT,IAA8B,SAAS,CAAC,KAAD,CAAvC,IAAkD,OAAO,KAAK,CAAC,QAAb,KAA0B,QAAnF;AACD,CAFD;;AAIA,IAAM,aAAa,GAAG,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AAClD,MAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,EAAoB,eAApB,CAAf;;AAEA,MAAI,MAAM,CAAC,KAAP,KAAiB,KAArB,EAA4B;AAC1B,WAAO,OAAO,MAAM,CAAC,KAAd,KAAwB,SAA/B;AACD;;AAED,SAAO,IAAP;AACD,CARD;;AAUA,IAAM,cAAc,GAAG,SAAS,cAAT,CAAwB,KAAxB,EAA+B;AACpD,MAAI,eAAe,KAAK,KAAxB,EAA+B;AAC7B,QAAM,MAAM,GAAG,OAAO,CAAC,SAAS,SAAT,GAAqB;AAC1C,aAAO,OAAO,CAAC,SAAR,CAAkB,KAAlB,EAAyB,WAAzB,CAAqC,KAArC,CAAP;AACD,KAFqB,CAAtB;;AAIA,QAAI,MAAM,CAAC,KAAP,KAAiB,KAArB,EAA4B;AAC1B,aAAO,SAAS,CAAC,MAAM,CAAC,KAAR,CAAhB;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAZD;;AAcA,IAAM,YAAY,GAAG,SAAS,YAAT,CAAsB,KAAtB,EAA6B;AAChD,MAAI,KAAK,KAAK,QAAd,EAAwB;AACtB,WAAO,IAAP;AACD;;AAED,MAAM,OAAO,GAAG,aAAa,CAAC,KAAD,CAA7B;;AAEA,MAAI,OAAO,KAAK,IAAhB,EAAsB;AACpB,WAAO,OAAP;AACD;;AAED,MAAM,OAAO,GAAG,cAAc,CAAC,KAAD,CAA9B;;AAEA,MAAI,OAAO,KAAK,IAAhB,EAAsB;AACpB,WAAO,OAAP;AACD;;AAED,SAAO,IAAP;AACD,CAlBD;AAoBA;;;;;;;;AAMA,IAAM,MAAM,GAAG,SAAS,MAAT,CAAgB,KAAhB,EAAuB;AACpC,MAAI,UAAU,CAAC,KAAD,CAAd,EAAuB;AACrB,QAAM,MAAM,GAAG,YAAY,CAAC,KAAD,CAA3B;;AAEA,QAAI,MAAM,KAAK,IAAf,EAAqB;AACnB,aAAO,MAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD,CAVD;;AAYA,eAAe,MAAf","file":"is-node-x.esm.js","sourcesContent":["import toBoolean from 'to-boolean-x';\nimport attempt from 'attempt-x';\n\nconst doc = typeof document === 'undefined' ? null : document;\nconst docHasChildNodes = doc ? doc.hasChildNodes : null;\nconst element = doc ? doc.createElement('div') : null;\n\nconst getDocInheritsNode = function getDocInheritsNode() {\n  const result = attempt(function attemptee() {\n    return docHasChildNodes.call(element);\n  });\n\n  return result.threw === false && typeof result.value === 'boolean';\n};\n\nconst docInheritsNode = getDocInheritsNode();\nconst hasChildNodesFn = element && docInheritsNode === false ? element.hasChildNodes : docHasChildNodes;\n\nconst shouldTest = function shouldTest(value) {\n  return toBoolean(hasChildNodesFn) && toBoolean(value) && typeof value.nodeType === 'number';\n};\n\nconst hasChildNodes = function hasChildNodes(value) {\n  const result = attempt.call(value, hasChildNodesFn);\n\n  if (result.threw === false) {\n    return typeof result.value === 'boolean';\n  }\n\n  return null;\n};\n\nconst canAppendChild = function canAppendChild(value) {\n  if (docInheritsNode === false) {\n    const result = attempt(function attemptee() {\n      return element.cloneNode(false).appendChild(value);\n    });\n\n    if (result.threw === false) {\n      return toBoolean(result.value);\n    }\n  }\n\n  return null;\n};\n\nconst performTests = function performTests(value) {\n  if (value === document) {\n    return true;\n  }\n\n  const result1 = hasChildNodes(value);\n\n  if (result1 !== null) {\n    return result1;\n  }\n\n  const result2 = canAppendChild(value);\n\n  if (result2 !== null) {\n    return result1;\n  }\n\n  return null;\n};\n\n/**\n * This method tests if `value` is a DOM Node.\n *\n * @param {*} [value] - The value to test.\n * @returns {boolean} True if a DOM Node, otherwise false.\n */\nconst isNode = function isNode(value) {\n  if (shouldTest(value)) {\n    const result = performTests(value);\n\n    if (result !== null) {\n      return result;\n    }\n  }\n\n  return false;\n};\n\nexport default isNode;\n"]}