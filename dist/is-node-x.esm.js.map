{"version":3,"sources":["../src/is-node-x.js"],"names":[],"mappings":"AAAA;AACA,IAAM,WAAW,GAAG,KAAK,WAAzB;;WAEwD,SAAS,IAAT,GAAgB;AACtE,MAAI,OAAO,QAAP,KAAoB,WAAxB,EAAqC;AACnC,QAAI;AACF,UAAM,WAAW,GAAG,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAApB;AACA,UAAM,gBAAe,GAAG,QAAQ,CAAC,aAAjC;AAEA,aAAO;AACL,QAAA,OAAO,EAAE,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CADJ;AAEL,QAAA,aAAa,EAAE,QAAQ,CAAC,aAFnB;AAGL,QAAA,oBAAoB,EAAE,OAAO,gBAAe,CAAC,IAAhB,CAAqB,WAArB,CAAP,KAA6C;AAH9D,OAAP;AAKD,KATD,CASE,OAAO,MAAP,EAAe,CACf;AACD;AACF;;AAED,SAAO;AACL,IAAA,OAAO,EAAE,IADJ;AAEL,IAAA,aAAa,EAAE,IAFV;AAGL,IAAA,oBAAoB,EAAE;AAHjB,GAAP;AAKD,CArBsD,E;IAAhD,oB,QAAA,oB;IAAsB,O,QAAA,O;IAAS,a,QAAA,a;;AAuBtC,IAAM,eAAe,GAAG,OAAO,IAAI,oBAAoB,KAAK,KAApC,GAA4C,OAAO,CAAC,aAApD,GAAoE,aAA5F;AAEA;;;;;;;AAMA,IAAM,MAAM,GAAG,SAAS,MAAT,CAAgB,KAAhB,EAAuB;AACpC,MAAI,eAAe,IAAI,KAAnB,IAA4B,OAAO,KAAK,CAAC,QAAb,KAA0B,QAA1D,EAAoE;AAClE,QAAI,KAAK,KAAK,QAAd,EAAwB;AACtB,aAAO,IAAP;AACD;;AAED,QAAI;AACF,aAAO,OAAO,eAAe,CAAC,IAAhB,CAAqB,KAArB,CAAP,KAAuC,SAA9C;AACD,KAFD,CAEE,OAAO,MAAP,EAAe,CACf;AACD;;AAED,QAAI,oBAAoB,KAAK,KAA7B,EAAoC;AAClC,UAAI;AACF,eAAO,WAAW,CAAC,OAAO,CAAC,SAAR,CAAkB,KAAlB,EAAyB,WAAzB,CAAqC,KAArC,CAAD,CAAlB;AACD,OAFD,CAEE,OAAO,MAAP,EAAe,CACf;AACD;AACF;AACF;;AAED,SAAO,KAAP;AACD,CAtBD;;AAwBA,eAAe,MAAf","file":"is-node-x.esm.js","sourcesContent":["/** @type {BooleanConstructor} */\nconst castBoolean = true.constructor;\n\nconst {documentInheritsNode, element, hasChildNodes} = (function init() {\n  if (typeof document !== 'undefined') {\n    try {\n      const testElement = document.createElement('div');\n      const hasChildNodesFn = document.hasChildNodes;\n\n      return {\n        element: document.createElement('div'),\n        hasChildNodes: document.hasChildNodes,\n        documentInheritsNode: typeof hasChildNodesFn.call(testElement) === 'boolean',\n      };\n    } catch (ignore) {\n      // empty\n    }\n  }\n\n  return {\n    element: null,\n    hasChildNodes: null,\n    documentInheritsNode: false,\n  };\n})();\n\nconst hasChildNodesFn = element && documentInheritsNode === false ? element.hasChildNodes : hasChildNodes;\n\n/**\n * This method tests if `value` is a DOM Node.\n *\n * @param {*} [value] - The value to test.\n * @returns {boolean} True if a DOM Node, otherwise false.\n */\nconst isNode = function isNode(value) {\n  if (hasChildNodesFn && value && typeof value.nodeType === 'number') {\n    if (value === document) {\n      return true;\n    }\n\n    try {\n      return typeof hasChildNodesFn.call(value) === 'boolean';\n    } catch (ignore) {\n      // empty\n    }\n\n    if (documentInheritsNode === false) {\n      try {\n        return castBoolean(element.cloneNode(false).appendChild(value));\n      } catch (ignore) {\n        // empty\n      }\n    }\n  }\n\n  return false;\n};\n\nexport default isNode;\n"]}